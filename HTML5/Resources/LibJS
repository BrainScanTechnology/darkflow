/////////////
// Globals //
/////////////

//Loading
  var DF_Loading_Width = 256;
  var DF_Loading_Height = 192;
  var DF_Resources_Count = 0;
  var DF_Resources_Done = 0;
  var DF_Load = false;

//Scenes
  var Scenes = [];
  var DF_Current_Scene;
  var DF_Scene_Count;
  var DF_Scene_Changing = false;

//Timing
  var Frames = 1;
  var SceneFrames = 0;
  var Seconds = 0;
  var SceneSeconds = 0;

//Key Mapping
  var Key_Up = 38;
  var Key_Down = 40;
  var Key_Left = 37;
  var Key_Right = 39;
  var Key_Space = 32;
  var Key_Enter = 13;
  var Key_Escape = 27;

//Pointer
  var Pointer_X = 0;
  var Pointer_Y = 0;
  var Pointer_Held = false;
  var Pointer_In = false;

//Current Render

  var Game_Logo = 0;

  var DF_Max_Width;
  var DF_Max_Height;

  var CS_Width;
  var CS_Height;
  var CS_View_X;
  var CS_View_Y;
  var CS_View_VX;
  var VS_View_VY;
  var CS_View_Width;
  var CS_View_Height;
  var CS_Background_Color = "rgb(255, 255, 255)";
  var CS_Background;
  var CS_Foreground;

  var DF_Draw_Logo = true;
  var DF_Must_Wait = true;
  var DF_Logo_X = 5;
  var DF_Logo_Y = 5;
  var DF_Logo_Width = 320;
  var DF_Logo_Height = 85;
  
  var DF_Draw_Background = false;
  var DF_Draw_Foreground = false;

//DOM Objects
  var Canvas;
  var ctx;

//Supported Platforms

  var DF_Platform;

  var DF_Windows = 0;
  var DF_Browser = 1;
  var DF_iPad = 2;
  var DF_iPhone = 3;


//////////////////////////
// Loading and Handling //
//////////////////////////

function DF_Set_Platform () {
 DF_Platform = DF_Browser;
 var IsiPad = navigator.userAgent.match(/iPad/i) != null;
 if (IsiPad) DF_Platform = DF_iPad;
 var IsiPhone = navigator.userAgent.match(/iPhone/i) != null;
 if (IsiPhone) DF_Platform = DF_iPhone;
}

function DF_Resize_Elements() {
 document.getElementById('GameBox').style.width = (DF_Max_Width) + "px";
 document.getElementById('GameBox').style.height = (DF_Max_Height) + "px";
 document.getElementById('Loader').style.marginLeft = ((DF_Max_Width - DF_Loading_Width) / 2) + "px";
 document.getElementById('VPusher').style.height = ((DF_Max_Height - DF_Loading_Height) / 2) + "px";
}

function DF_iPad_Fixes() {
 document.getElementById('GameBox').className += " GameBoxiPad";
 DF_Rotated();
}

function DF_iPhone_Fixes() {
 document.body.style.margin = "0";
 document.getElementById('GameBox').style.margin = "64px auto 32px auto";
}

function DF_iPad_After_Fixes() {
 //No Fixes Yet
}

function DF_iPhone_After_Fixes() {
 window.scrollTo(0, 0);
}

function DF_Play_Game() {
 if (DFDontLoad == false) {
 DF_Init_Alarms(16);
 DF_Set_Platform();
 DF_Init_Values();
 DF_Init_Resources();
 DF_Init_Scenes();
 DF_Resize_Elements();
 if (DF_Platform == DF_iPad) DF_iPad_Fixes();
 if (DF_Platform == DF_iPhone) DF_iPhone_Fixes();
 DF_Add_Handlers();
 DF_Start_Load();
 }
}

function SetSpeed(ID, Mag) {
	var OVX = Instances[ID].VX;
	var OVY = Instances[ID].VY;
	var theta = 0;
	if (!(OVX == 0 && OVY == 0)) {
		theta = Math.atan(OVY/OVX);
	}
	if (OVX < 0) {
		theta += Math.PI;
	}
	 while (theta >= 2*Math.PI) {
		theta -= 2*Math.PI;
	 }
	 while (theta < 0) {
		theta += 2*Math.PI;
	 }
	Instances[ID].VX = Mag*Math.cos(theta);
	Instances[ID].VY = Mag*Math.sin(theta);
}
function SetDirection(ID, a) {
	var OVX = Instances[ID].VX;
	var OVY = Instances[ID].VY;
	var Mag = Math.sqrt(OVX*OVX + OVY*OVY);
	var theta = 0;
	if (!Mag == 0) {
		theta = a;
	}
	theta = theta * Math.PI / 180;
	Instances[ID].VX = Mag*Math.cos(theta);
	Instances[ID].VY = Mag*Math.sin(theta);
}
function SetAccel(ID, accel) {
	var OAX = Instances[ID].AX;
	var OAY = Instances[ID].AY;
	var theta = 0;
if (!(OAX == 0)) {
		theta = Math.atan(OAY/OAX);
	}
	if (OAX < 0) {
		theta += Math.PI;
	}
	 while (theta >= 2*Math.PI) {
		theta -= 2*Math.PI;
	 }
	 while (theta < 0) {
		theta += 2*Math.PI;
	 }
	theta = theta * Math.PI / 180;
	Instances[ID].AX = accel*Math.cos(theta);
	Instances[ID].AY = accel*Math.sin(theta);
}
function SetAccelDir(ID, a) {
	var OAX = Instances[ID].AX;
	var OAY = Instances[ID].AY;
	var Mag = Math.sqrt(OAX*OAX + OAY*OAY);
	var theta = 0;
	if (!Mag == 0) {
		theta = a;
	}
	theta = theta * Math.PI / 180;
	Instances[ID].AX = Mag*Math.cos(theta);
	Instances[ID].AY = Mag*Math.sin(theta);
}

function DF_Add_Handlers() {
 Canvas = document.getElementById("Canvas");
 ctx = Canvas.getContext("2d");
 if (DF_Platform == DF_Browser) {
  Canvas.onclick = DF_On_Click;
  Canvas.onmousemove = DF_On_Mouse_Move;
  Canvas.onmousedown = DF_On_Mouse_Down;
  Canvas.onmouseup = DF_On_Mouse_Up;
  window.onkeydown = DF_On_Key_Down;
  window.onkeyup = DF_On_Key_Up;
 } else if (DF_Platform == DF_iPad || DF_Platform == DF_iPhone) {
  Canvas.ontouchstart = DF_On_Touch_Start;
  Canvas.ontouchmove = DF_On_Touch_Move;
  Canvas.ontouchend = DF_On_Touch_End;
  window.onorientationchange = DF_Rotated;
 }
}

function DF_Start_Load() {
 document.getElementById('GameBox').style.display = "block";
 if (DF_Platform == DF_iPad) DF_iPad_After_Fixes();
 if (DF_Platform == DF_iPhone) DF_iPhone_After_Fixes();
 DF_Load_A_Resource(0);
}

function DF_Load_A_Resource(ID) {
 if (DF_Resources_Done == DF_Resources_Count) {
  DF_Set_Progress(100);
  if (DF_Must_Wait) {
   setTimeout(DF_Finish_Load, 512);
  } else {
   setTimeout(DF_Finish_Load, 128);
  }
  return;
 }
 var Spontan = function() {
  DF_Resources_Done += 1;
  DF_Set_Progress((DF_Resources_Done / DF_Resources_Count) * 100);
  if (DF_Must_Wait) {
   setTimeout(function() { DF_Load_A_Resource(ID + 1) }, 64);
  } else {
   setTimeout(function() { DF_Load_A_Resource(ID + 1) }, 16);
  }
 }
 if (Resources[ID].Type == 0) {
  Resources[ID].Data.onload = Spontan;
 } else {
  if (DF_Platform == DF_iPad || DF_Platform == DF_iPhone) {
   Spontan();
  } else {
   if (Resources[ID].Data.canPlayType("audio/wav") != "") {
    Resources[ID].Data.onloadeddata = Spontan;
    //WebKit
    Resources[ID].Data.addEventListener("loadeddata", Spontan);
   } else {
    Spontan();
   }
  }
 }
 Resources[ID].Data.src = "DFResources/" + Resources[ID].Name + "." + ((Resources[ID].Type == 0) ? "png" : "wav");
}

function DF_Finish_Load() {
 Scenes[DF_Current_Scene]();
 document.getElementById("Loader").style.display = "none";
 document.getElementById("Canvas").style.display = "block";
 var FPS = 30;
 setInterval(DF_VBL, (1000 / FPS));
}

function DF_Set_Progress(Percent) {
 if (Percent <= 100) document.getElementById('ProgressBlocker').style.width = (100 - Percent) + "%";
}


///////////////
// Resources //
///////////////

function Resource(Name, Type, Data, Auxiliary1, Auxiliary2, Auxiliary3) {
 this.Name = Name;
 this.Type = Type;
 this.Data = Data;
 this.Auxiliary1 = Auxiliary1;
 this.Auxiliary2 = Auxiliary2;
 this.Auxiliary3 = Auxiliary3;
}
var Resources = new Object();

function Instance(ObjectID, ImageID, X, Y, DEPTH) {
 this.InUse = true;
 this.ObjectID = ObjectID;
 this.ImageID = ImageID;
 this.X = X;
 this.Y = Y;
 this.StartX = X;
 this.StartY = Y;
 this.VX = 0;
 this.VY = 0;
 this.AX = 0;
 this.AY = 0;
 this.T = 0;
 this.TV = 0;
 this.DEPTH = DEPTH;
 this.FRAMESPEED = 0;
 this.FRAME = 0;
 this.VariableNames = [];
 this.VariableValues = [];
 this.VariableArrVal1 = [];
 this.VariableArrVal2 = [];
 this.VariableArrVal3 = [];
}
var Globals = new Instance(0, 0, 0, 0, 0);
var Instances = new Object();
function Get_Accel(ID) {
	var xt = Instances[ID].AX * Instances[ID].AX;
	var yt = Instances[ID].AY * Instances[ID].AY;
	if (xt < 0) xt = -xt;
	if (yt < 0) yt = -yt;
	return Math.sqrt((xt)+(yt));

}
function Get_Speed(ID) {
	var xt = Instances[ID].VX * Instances[ID].VX;
	var yt = Instances[ID].VY * Instances[ID].VY;
	if (xt < 0) xt = -xt;
	if (yt < 0) yt = -yt;
	return Math.sqrt((xt)+(yt));
}

function Get_Accel_Angle(ID) {
	var theta = 0;
                if (!(Instances[ID].AX == 0 && Instances[ID].AY == 0)) {
                    theta = Math.atan(Instances[ID].AY / Instances[ID].AX);
                }
                if (Instances[ID].AX < 0) {
                    theta += Math.PI;
                }
    return ((theta * 180) / Math.PI);
	
}
function Get_Direction(ID) {
		var theta = 0;
                if (!(Instances[ID].VX == 0 && Instances[ID].VY == 0)) {
                    theta = Math.atan(Instances[ID].VY / Instances[ID].VX);
                }
                if (Instances[ID].VX < 0) {
                    theta += Math.PI;
                }
    return ((theta * 180) / Math.PI);
}

function DText(Font, Data, X, Y) {
 this.Font = Font;
 this.Data = Data;
 this.X = X;
 this.Y = Y;
}
var DTexts = new Array();
function DF_Clear_Text() {
  DTexts = new Array();
}

function DF_CheckPosition(Obj, X, Y) {
 for (i in Instances) {
  if (DF_Ignore(i)) continue;
  if (Instances[i].ObjectID == Obj) {
   if (PointInRotatedRect(X, Y, Instances[i].X, Instances[i].Y, Resources[Instances[i].ImageID].Auxiliary1, Resources[Instances[i].ImageID].Auxiliary3, Instances[i].T)) return true;
  }
 }
 return false;
}

function DF_Draw_Text(Font, Data, X, Y) {
 if (DTexts.length > 0) {
  var I = 0;
  var CM = false;
  for (I = 0; I < DTexts.Length; I++) {
   if (DTexts[I].X == X && DTexts[I].Y == Y) {
    DTexts[I] = new DText(Font, Data, X, Y);
	CM = true;
   }
  }
 }
 if (!CM) {
  DTexts[DTexts.length] = new DText(Font, Data, X, Y);
 }
}

function DF_Get_Instance_Variable(InstanceID, VariableName, ArrayVal1, ArrayVal2, ArrayVal3) {
 if(Instances[InstanceID].VariableNames.length == 0) return 0;
 var i = 0;
 for (i = 0; i < Instances[InstanceID].VariableNames.length; i++) {
  if (Instances[InstanceID].VariableNames[i] == VariableName && Instances[InstanceID].VariableArrVal1[i] == ArrayVal1 && Instances[InstanceID].VariableArrVal2[i] == ArrayVal2 && Instances[InstanceID].VariableArrVal3[i] == ArrayVal3) return Instances[InstanceID].VariableValues[i];
 }
 return 0;
}
function DF_Get_Global_Variable(VariableName, ArrayVal1, ArrayVal2, ArrayVal3) {
 if(Globals.VariableNames.length == 0) return 0;
 var i = 0;
 for (i = 0; i < Globals.VariableNames.length; i++) {
  if (Globals.VariableNames[i] == VariableName && Globals.VariableArrVal1[i] == ArrayVal1 && Globals.VariableArrVal2[i] == ArrayVal2 && Globals.VariableArrVal3[i] == ArrayVal3) return Globals.VariableValues[i];
 }
 return 0;
}
 function DF_Set_Global_Variable(VariableName, ArrayVal1, ArrayVal2, ArrayVal3, VariableValue) {
 var DLength = Globals.VariableNames.length;
 if (DLength == 0) {
  Globals.VariableNames[DLength] = VariableName;
  Globals.VariableArrVal1[DLength] = ArrayVal1;
  Globals.VariableArrVal2[DLength] = ArrayVal2;
  Globals.VariableArrVal3[DLength] = ArrayVal3;
  Globals.VariableValues[DLength] = VariableValue;
  return;
 }
 var DidFind = false;
 var i = 0;
 for (i = 0; i < DLength; i++) {
  if (Globals.VariableNames[i] == VariableName && Globals.VariableArrVal1[i] == ArrayVal1 && Globals.VariableArrVal2[i] == ArrayVal2 && Globals.VariableArrVal3[i] == ArrayVal3) {
   Globals.VariableValues[i] = VariableValue;
   DidFind = true;
  }
 }
 if (!DidFind) {
  Globals.VariableNames[DLength] = VariableName;
  Globals.VariableArrVal1[DLength] = ArrayVal1;
  Globals.VariableArrVal2[DLength] = ArrayVal2;
  Globals.VariableArrVal3[DLength] = ArrayVal3;
  Globals.VariableValues[DLength] = VariableValue;
 }
}

function DF_Set_Instance_Variable(InstanceID, VariableName, ArrayVal1, ArrayVal2, ArrayVal3, VariableValue) {
 var DLength = Instances[InstanceID].VariableNames.length;
 if (DLength == 0) {
  Instances[InstanceID].VariableNames[DLength] = VariableName;
  Instances[InstanceID].VariableArrVal1[DLength] = ArrayVal1;
  Instances[InstanceID].VariableArrVal2[DLength] = ArrayVal2;
  Instances[InstanceID].VariableArrVal3[DLength] = ArrayVal3;
  Instances[InstanceID].VariableValues[DLength] = VariableValue;
  return;
 }
 var DidFind = false;
 var i = 0;
 for (i = 0; i < DLength; i++) {
  if (Instances[InstanceID].VariableNames[i] == VariableName && Instances[InstanceID].VariableArrVal1[i] == ArrayVal1 && Instances[InstanceID].VariableArrVal2[i] == ArrayVal2 && Instances[InstanceID].VariableArrVal3[i] == ArrayVal3) {
   Instances[InstanceID].VariableValues[i] = VariableValue;
   DidFind = true;
  }
 }
 if (!DidFind) {
  Instances[InstanceID].VariableNames[DLength] = VariableName;
  Instances[InstanceID].VariableArrVal1[DLength] = ArrayVal1;
  Instances[InstanceID].VariableArrVal2[DLength] = ArrayVal2;
  Instances[InstanceID].VariableArrVal3[DLength] = ArrayVal3;
  Instances[InstanceID].VariableValues[DLength] = VariableValue;
 }
}


////////////
// Alarms //
////////////

var DF_Alarms_Limit = 16;

function Alarm(Enabled, Time) {
 this.Enabled = Enabled;
 this.Time = Time;
}
var Alarms = new Object();

function DF_Set_Alarm(AlarmID, Time, EnableGleichZeitig) {
 Alarms[AlarmID].Time = Time;
 Alarms[AlarmID].Enabled = EnableGleichZeitig;
}

function DF_Alarms_Sync() {
 var i = 0;
 for (i = 0; i < DF_Alarms_Limit; i++) {
  if (!Alarms[i].Enabled) continue;
  if (Alarms[i].Time == 0) {
   Alarms[i].Enabled = false;
  } else {
   Alarms[i].Time -= 1;
  }
 }
}

function DF_Init_Alarms() {
 var i = 0;
 for (i = 0; i < DF_Alarms_Limit; i++) {
  Alarms[i] = new Alarm(false, 30);
 }
}

////////////////////////
// Internal Functions //
////////////////////////

function DF_Ignore(InstanceID) {
 if (Instances[InstanceID] == null) return true;
 if (!Instances[InstanceID].InUse) return true;
 return false;
}

function DF_Next_Instance() {
 var Count = 0;
 for (i in Instances) {
  Count += 1;
 }
 return (Count);
}

function DF_Scene_Reset(L_Scene_Width, L_Scene_Height, L_View_Width, L_View_Height, L_View_X, L_View_Y) {

 Instances = new Object();

 CS_Background_Color = "rgb(255, 255, 255)";
 CS_Background = null;
 CS_Foreground = null;
 DF_Draw_Background = false;
 DF_Draw_Foreground = false;

 CS_Width = L_Scene_Width;
 CS_Height = L_Scene_Height;
 CS_View_Width = L_View_Width;
 CS_View_Height = L_View_Height;
 CS_View_X = L_View_X;
 CS_View_Y = L_View_Y;
 CS_View_VX = 0; CS_View_VY = 0;

 Canvas.style.width = CS_View_Width;
 Canvas.style.height = CS_View_Height;
 Canvas.width = CS_View_Width;
 Canvas.height = CS_View_Height;

 DF_Logo_Height = parseInt(L_View_Height / 8);
 DF_Logo_Width = parseInt(320 * (DF_Logo_Height / 85));

 Canvas.style.marginLeft = ((DF_Max_Width - CS_View_Width) / 2) + "px";
 document.getElementById('VPusher').style.height = ((DF_Max_Height - CS_View_Height) / 2) + "px";

}

function DF_Collision(AppliesTo1, AppliesTo2) {

	var r1X = Instances[AppliesTo1].X;
	var r1Y = Instances[AppliesTo1].Y;
	var r1w = Resources[Instances[AppliesTo1].ImageID].Auxiliary1;
	var r1h = Resources[Instances[AppliesTo1].ImageID].Auxiliary3;

	var r2X = Instances[AppliesTo2].X;
	var r2Y = Instances[AppliesTo2].Y;
	var r2w = Resources[Instances[AppliesTo2].ImageID].Auxiliary1;
	var r2h = Resources[Instances[AppliesTo2].ImageID].Auxiliary3;

	var big1 = r1h;
	if (r1w > r1h) big1 = r1w;

	var big2 = r2h;
	if (r2w > r2h) big2 = r2w;

	if ((r1X + big1) < (r2X-big2)) return false;
	if ((r1X - big1) > (r2X+big2)) return false;
	if ((r1Y + big1) < (r2Y-big2)) return false;
	if ((r1Y - big1) > (r2Y+big2)) return false;

    var theta1 = Instances[AppliesTo1].T;
    var theta2 = Instances[AppliesTo2].T;
	
	while (theta1 >= 360) {
		theta1 -= 360;
	 }
	 while (theta1 < 0) {
		theta1 += 360;
	 }

	 while (theta2 >= 360) {
		theta2 -= 360;
	 }
	 while (theta2 < 0) {
		theta2 += 360;
	 }
     
	 var a2 = Math.PI * theta1 / 180;
	 var a1 = Math.PI * theta2 / 180;

	 var Px = Math.round(r1X + 0.5 * (r1w - r1w * Math.cos(a2) + r1h * Math.sin(a2)));
	 var Py = Math.round(r1Y + 0.5 * (r1h - r1w * Math.sin(a2) - r1h * Math.cos(a2)));

	 var Qx = Math.round(r1X + 0.5 * (r1w + r1w * Math.cos(a2) + r1h * Math.sin(a2)));
	 var Qy = Math.round(r1Y + 0.5 * (r1h + r1w * Math.sin(a2) - r1h * Math.cos(a2)));

	 var Rx = Math.round(r1X + 0.5 * (r1w + r1w * Math.cos(a2) - r1h * Math.sin(a2)));
	 var Ry = Math.round(r1Y + 0.5 * (r1h + r1w * Math.sin(a2) + r1h * Math.cos(a2)));

	 var Sx = Math.round(r1X + 0.5 * (r1w - r1w * Math.cos(a2) - r1h * Math.sin(a2)));
	 var Sy = Math.round(r1Y + 0.5 * (r1h - r1w * Math.sin(a2) + r1h * Math.cos(a2)));
	
	 if (PointInRotatedRect(Px, Py, r2X, r2Y, r2w, r2h, theta2)) return true;
	 if (PointInRotatedRect(Qx, Qy, r2X, r2Y, r2w, r2h, theta2)) return true;
	 if (PointInRotatedRect(Rx, Ry, r2X, r2Y, r2w, r2h, theta2)) return true;
	 if (PointInRotatedRect(Sx, Sy, r2X, r2Y, r2w, r2h, theta2)) return true;

	 Px = Math.round(r2X + 0.5 * (r2w - r2w * Math.cos(a1) + r2h * Math.sin(a1)));
	 Py = Math.round(r2Y + 0.5 * (r2h - r2w * Math.sin(a1) - r2h * Math.cos(a1)));

	 Qx = Math.round(r2X + 0.5 * (r2w + r2w * Math.cos(a1) + r2h * Math.sin(a1)));
	 Qy = Math.round(r2Y + 0.5 * (r2h + r2w * Math.sin(a1) - r2h * Math.cos(a1)));

	 Rx = Math.round(r2X + 0.5 * (r2w + r2w * Math.cos(a1) - r2h * Math.sin(a1)));
	 Ry = Math.round(r2Y + 0.5 * (r2h + r2w * Math.sin(a1) + r2h * Math.cos(a1)));

	 Sx = Math.round(r2X + 0.5 * (r2w - r2w * Math.cos(a1) - r2h * Math.sin(a1)));
	 Sy = Math.round(r2Y + 0.5 * (r2h - r2w * Math.sin(a1) + r2h * Math.cos(a1)));

	 if (PointInRotatedRect(Px, Py, r1X, r1Y, r1w, r1h, theta1)) return true;
	 if (PointInRotatedRect(Qx, Qy, r1X, r1Y, r1w, r1h, theta1)) return true;
	 if (PointInRotatedRect(Rx, Ry, r1X, r1Y, r1w, r1h, theta1)) return true;
	 if (PointInRotatedRect(Sx, Sy, r1X, r1Y, r1w, r1h, theta1)) return true;

     return false;
}

function PointInRotatedRect(TestX, TestY, rX, rY, rw, rh, theta) {
	var outBool = false;

	while (theta >= 360) {
		theta -= 360;
	 }
	 while (theta < 0) {
		theta += 360;
	 }

    var a = Math.PI * theta / 180;
   
	 var Px = Math.round(rX + 0.5 * (rw - rw * Math.cos(a) + rh * Math.sin(a)));
	 var Py = Math.round(rY + 0.5 * (rh - rw * Math.sin(a) - rh * Math.cos(a)));

	 var Qx = Math.round(rX + 0.5 * (rw + rw * Math.cos(a) + rh * Math.sin(a)));
	 var Qy = Math.round(rY + 0.5 * (rh + rw * Math.sin(a) - rh * Math.cos(a)));

	 var Rx = Math.round(rX + 0.5 * (rw + rw * Math.cos(a) - rh * Math.sin(a)));
	 var Ry = Math.round(rY + 0.5 * (rh + rw * Math.sin(a) + rh * Math.cos(a)));

	 var Sx = Math.round(rX + 0.5 * (rw - rw * Math.cos(a) - rh * Math.sin(a)));
	 var Sy = Math.round(rY + 0.5 * (rh - rw * Math.sin(a) + rh * Math.cos(a)));

     if (theta >= 90 && theta < 180) {
		 var nPx = Sx;
		 var nPy = Sy;

		 var nQx = Px;
		 var nQy = Py;

		 var nRx = Qx;
		 var nRy = Qy;

		 var nSx = Rx;
		 var nSy = Ry;

		 Px = nPx;
		 Py = nPy;
		  Qx = nQx;
		 Qy = nQy;
		  Rx = nRx;
		 Ry = nRy;
		  Sx = nSx;
		 Sy = nSy;
       }

	   if (theta >= 180 && theta < 270) {
		 var nPx = Rx;
		 var nPy = Ry;

		 var nQx = Sx;
		 var nQy = Sy;

		 var nRx = Px;
		 var nRy = Py;

		 var nSx = Qx;
		 var nSy = Qy;

		 Px = nPx;
		 Py = nPy;
		  Qx = nQx;
		 Qy = nQy;
		  Rx = nRx;
		 Ry = nRy;
		  Sx = nSx;
		 Sy = nSy;
        }

		if (theta >= 270 && theta < 360) {
		 var nPx = Qx;
		 var nPy = Qy;

		 var nQx = Rx;
		 var nQy = Ry;

		 var nRx = Sx;
		 var nRy = Sy;

		 var nSx = Px;
		 var nSy = Py;

		 Px = nPx;
		 Py = nPy;
		  Qx = nQx;
		 Qy = nQy;
		  Rx = nRx;
		 Ry = nRy;
		  Sx = nSx;
		 Sy = nSy;
        }

        var G1 = 0;
        var G1 = 0;

        var isRect = false;
        if (!(Px == Sx || Px == Qx)) {
            G1 = ((Py - Sy) / (Px - Sx));
            G2 = ((Py - Qy) / (Px - Qx));
        }else{
            isRect = true;
        }


        var L1Valid  = false;
        var L2Valid  = false;

        if (!isRect) {
            if (((TestX - Sx) * G1 <= TestY - Sy) && ((TestX - Rx) * G1 >= TestY - Ry)) {
                L1Valid = true;
            }
			if (((TestX - Qx) * G2 <= TestY - Qy) && ((TestX - Rx) * G2 >= TestY - Ry)) {
                L2Valid = true;
            }
        }else{

            if (Px == Sx) {
				if (Px < Qx) {
                    if (TestX >= Px && TestX <= Qx) L1Valid = true;
                } else {
					if (TestX >= Qx && TestX <= Px) L1Valid = true;
                }
            }else{
				if (Px < Sx) {
                    if (TestX >= Px && TestX <= Sx) L1Valid = true;
                } else {
					if (TestX >= Sx && TestX <= Px) L1Valid = true;
                }
            }

			if (Py == Sy) {
				if (Py < Qy) {
                    if (TestY >= Py && TestY <= Qy) L2Valid = true;
                } else {
					if (TestY >= Qy && TestY <= Py) L2Valid = true;
                }
            }else{
				if (Py < Sy) {
                    if (TestY >= Py && TestY <= Sy) L2Valid = true;
                } else {
					if (TestY >= Sy && TestY <= Py) L2Valid = true;
                }
            }

        }
        if (L1Valid && L2Valid) {
            outBool = true;
        }
        return outBool;
}

function DF_Instance_In_Range(InstanceID, pX, pY) {
 if (DF_Ignore(InstanceID)) return false;
if (Instances[InstanceID].ImageID != -1) {
 var X = Instances[InstanceID].X
 var Y = Instances[InstanceID].Y;
 var W = Resources[Instances[InstanceID].ImageID].Auxiliary1;
 var H = Resources[Instances[InstanceID].ImageID].Auxiliary3;
 var a = Instances[InstanceID].T;
 if (pX == -1) pX = Pointer_X + CS_View_X;
 if (pY == -1) pY = Pointer_Y + CS_View_Y;
 
 return PointInRotatedRect(pX, pY, X, Y, W, H, a);
 }
 return false;
}


///////////////
// Game Loop //
///////////////

function DF_VBL() {
 DF_Scene_Changing = false;
 DF_Alarms_Sync();
 DF_Draw();
 DF_Events();
}

function DF_Draw() {

 if (CS_View_VX >= 0) {
  if ((CS_Width - (CS_View_X + CS_View_Width)) >= CS_View_VX) {
   CS_View_X += CS_View_VX;
  }
 } else {
  if ((CS_View_VX * -1) > CS_View_X) {
   CS_View_X = 0;
  } else {
   CS_View_X += CS_View_VX;
  }
 }
 if (CS_View_VY > 0 && (CS_Height - (CS_View_Y + CS_View_Height)) >= CS_View_Y) CS_View_Y += CS_View_VY;
 if (CS_View_VY < 0 && (CS_View_VY * -1) > CS_View_Y) {
  CS_View_Y = 0;
 } else {
  CS_View_Y += CS_View_VY;
 }
 if (CS_View_X < 0) CS_View_X = 0;
 if (CS_View_Y < 0) CS_View_Y = 0;
 if ((CS_View_X + CS_View_Width) > CS_Width) CS_View_X = CS_Width - CS_View_Width;
 if ((CS_View_Y + CS_View_Height) > CS_Height) CS_View_Y = CS_Height - CS_View_Height;
 ctx.fillStyle = CS_Background_Color;
 ctx.fillRect(0, 0, CS_View_Width, CS_View_Height);
 if (DF_Draw_Background) {
	var tW = 0;
	while (tW < CS_View_X + CS_View_Width) {
		var tH = 0;
		while (tH < CS_View_Y + CS_View_Height) {
			ctx.drawImage(Resources[CS_Background].Data, -CS_View_X + tW, -CS_View_Y + tH);
			tH += Resources[CS_Background].Auxiliary2;
		}
		tW += Resources[CS_Background].Auxiliary1;
	}
 }
 var dPTH = 200;
 for (dPTH = 200; dPTH >= 0; dPTH --) {
	for (InstanceID in Instances) {
      
	  if (DF_Ignore(InstanceID) || Instances[InstanceID].DEPTH != dPTH) continue;
	  Instances[InstanceID].T += Instances[InstanceID].TV;
	  Instances[InstanceID].X += Instances[InstanceID].VX;
	  Instances[InstanceID].Y += Instances[InstanceID].VY;
	  Instances[InstanceID].VX += Instances[InstanceID].AX;
	  Instances[InstanceID].VY += Instances[InstanceID].AY;
	  if (Instances[InstanceID].ImageID != -1) {
	   var W = Resources[Instances[InstanceID].ImageID].Auxiliary1;
	   var H = Resources[Instances[InstanceID].ImageID].Auxiliary2;
	   var DX = Instances[InstanceID].X - CS_View_X;
	   var DY = Instances[InstanceID].Y - CS_View_Y;
	   var FH = Resources[Instances[InstanceID].ImageID].Auxiliary3;
	   if (Instances[InstanceID].FRAMESPEED > 0) {
	   if (Frames % Math.floor(30 / Instances[InstanceID].FRAMESPEED) == 0) {
		Instances[InstanceID].FRAME += 1
		while (Instances[InstanceID].FRAME >= Math.floor(H/FH)) {
			Instances[InstanceID].FRAME -= Math.floor(H/FH);
		}

		while (Instances[InstanceID].FRAME < 0) {
			Instances[InstanceID].FRAME += Math.floor(H/FH);
		}
	   }
	  }
	  var F = Instances[InstanceID].FRAME;
	  var a = Instances[InstanceID].T;

	  ctx.save();
	  ctx.translate(DX + (W/2), DY + (FH/2));
	  ctx.rotate(a*(Math.PI/180));
	  ctx.translate(-DX - (W/2), -DY - (FH/2));
	  ctx.drawImage(Resources[Instances[InstanceID].ImageID].Data, 0, (F * FH), W, FH, DX, DY, W, FH);
	  ctx.restore();
	  }
	 }
 }
 if (DF_Draw_Logo) ctx.drawImage(Resources[Game_Logo].Data, 0, 0, 320, 85, DF_Logo_X, DF_Logo_Y, DF_Logo_Width, DF_Logo_Height);
 if (DF_Draw_Foreground) ctx.drawImage(Resources[CS_Foreground].Data, 0, 0);
 
 if (DTexts.length > 0) {
  var I = 0;
  for (I = 0; I < DTexts.length; I++) {
   var TW = Resources[DTexts[I].Font].Auxiliary1 / 16;
   var TH = Resources[DTexts[I].Font].Auxiliary2 / 16;
   var PX = DTexts[I].X;
   var PY = DTexts[I].Y;
   var P = 0;
   for (P = 0; P < DTexts[I].Data.length; P++) {
    ctx.drawImage(Resources[DTexts[I].Font].Data, (DTexts[I].Data.toString().charCodeAt(P) % 16)*TW, Math.floor(DTexts[I].Data.toString().charCodeAt(P)/16)*TH, TW, TH, PX, PY, TW, TH);
    PX += TW; 
   }

  }
 }
 
 Frames ++;
 
}


///////////
// Input //
///////////

//Co-Ordinate Manipulation

function DF_Get_Real_Coords(e) {
 return { X: e.pageX - Canvas.offsetLeft, Y: e.pageY - Canvas.offsetTop };
}

function Sin(a) {
 return Math.sin(Math.PI*a/180);
}

function Get_angle(ID,tx,ty) {
 var xpart;
 var ypart;
 xpart = tx - Instances[ID].X;
 ypart = ty - Instances[ID].Y;
 var theta = 0;
 theta = Math.atan(ypart/xpart);
 theta = theta*180/Math.PI
 if (xpart < 0) theta += 180;
 while (theta >= 360) {
	theta -= 360;
 }
 while (theta < 0) {
	theta += 360;
 }
 return theta;
}

function Cos(a) {
 return Math.cos(Math.PI*a/180);
}

function DF_Move_Logic(X, Y) {
 Pointer_In = true;
 if (X < 0) X = 0;
 if (Y < 0) Y = 0;
 if (X >= CS_View_Width) {
  Pointer_X = CS_View_Width;
  Pointer_In = false;
 } else {
  Pointer_X = X;
 }
 if (Y >= CS_View_Height) {
  Pointer_Y = CS_View_Height;
  Pointer_In = false;
 } else {
  Pointer_Y = Y;
 }
}

//Browser Pointer Events

function DF_On_Click(e) {
 DF_Pointer_Click_Logic(-1,-1);
}

function DF_On_Mouse_Move(e) {
 var Z = DF_Get_Real_Coords(e);
 DF_Move_Logic(Z.X, Z.Y);
 DF_Pointer_Over_Logic(-1,-1);
 if (Pointer_Held) DF_Pointer_Held_Logic(-1,-1);
 //return false; //Any idea if this does anything useful?
}

function DF_On_Mouse_Down(e) {
 Pointer_Held = true;
 DF_Pointer_Down_Logic(-1,-1);
 DF_Pointer_Held_Logic(-1,-1);
}

function DF_On_Mouse_Up(e) {
 Pointer_Held = false;
 DF_Pointer_Up_Logic(-1,-1);
}

//iOS Touch Events

function DF_On_Touch_Start(e) {
 var Z = DF_Get_Real_Coords(e.touches[0]);
 DF_Move_Logic(Z.X, Z.Y);
 Pointer_Held = true;
 DF_Pointer_Down_Logic(-1,-1);
 DF_Pointer_Held_Logic(-1,-1);
}

function DF_On_Touch_Move(e) {
 var Z = DF_Get_Real_Coords(e.touches[0]);
 DF_Move_Logic(Z.X, Z.Y);
 if (Pointer_Held) DF_Pointer_Held_Logic(-1,-1);
 return false;
}

function DF_On_Touch_End(e) {
 DF_Pointer_Up_Logic(-1,-1);
 DF_Pointer_Click_Logic(-1,-1);
 Pointer_Held = false;
}

//Miscellaneous Fired Events

function DF_Rotated() {
 document.getElementById('GameBox').style.marginLeft = ((window.innerWidth - DF_Max_Width) / 2) + "px";
 document.getElementById('GameBox').style.marginTop = ((window.innerHeight - DF_Max_Height) / 2) + "px";
}

//Keyboard Events

function DF_On_Key_Down(e) {
 var Which_Key = (e.keyCode || e.which);
 var Do_Stop = false;
 if (Which_Key == Key_Up) Do_Stop = true;
 if (Which_Key == Key_Down) Do_Stop = true;
 if (Which_Key == Key_Left) Do_Stop = true;
 if (Which_Key == Key_Right) Do_Stop = true;
 if (Do_Stop) e.preventDefault();
 DF_Key_Down_Logic(Which_Key);
}

function DF_On_Key_Up(e) {
 var Which_Key = (e.keyCode || e.which);
 var Do_Stop = false;
 if (Which_Key == Key_Up) Do_Stop = true;
 if (Which_Key == Key_Down) Do_Stop = true;
 if (Which_Key == Key_Left) Do_Stop = true;
 if (Which_Key == Key_Right) Do_Stop = true;
 if (Do_Stop) e.preventDefault();
 DF_Key_Up_Logic(Which_Key);
}